<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Shop</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for a cleaner look */
        body {
            font-family: 'Inter', sans-serif;
        }
        .product-card {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
    </style>
     <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
</head>
<body class="bg-gray-50">

    <div class="container mx-auto p-8">
        <h1 class="text-5xl font-extrabold text-center text-gray-800 mb-4">My Shop</h1>
        <h2 class="text-3xl font-bold text-center text-gray-700 mb-10">Products</h2>

        <!-- Products Section -->
        <div id="products" class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
            <!-- Product data will be used to generate cards here -->
        </div>

        <hr class="my-12 border-t border-gray-300">

        <!-- Shopping Cart Section -->
        <div>
            <h2 class="text-3xl font-bold text-center text-gray-700 mb-10">Shopping Cart</h2>
            <div id="cart-items" class="space-y-4 max-w-2xl mx-auto">
                <!-- Cart items will be displayed here -->
            </div>
        </div>
    </div>

    <script>
        // --- DATA ---
        const products = [
            { id: 1, name: 'Laptop', price: 1200 },
            { id: 2, name: 'Mouse', price: 25 },
            { id: 3, name: 'Keyboard', price: 45 },
        ];

        let cart = [
             { id: 1, name: 'Laptop', price: 1200, quantity: 1 },
             { id: 2, name: 'Mouse', price: 25, quantity: 1 }
        ];

        // --- DOM ELEMENTS ---
        const productsContainer = document.getElementById('products');
        const cartContainer = document.getElementById('cart-items');

        // --- RENDER FUNCTIONS ---

        /**
         * Renders the product cards in the products section.
         */
        function renderProducts() {
            productsContainer.innerHTML = ''; // Clear existing products
            products.forEach(product => {
                const card = `
                    <div class="bg-white border border-gray-200 rounded-lg p-6 text-center flex flex-col items-center product-card transition-transform transform hover:scale-105">
                        <h3 class="text-xl font-semibold text-gray-800 mb-2">${product.name}</h3>
                        <p class="text-lg text-gray-600 mb-4">$${product.price}</p>
                        <button onclick="addToCart(${product.id})" class="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-300 rounded-md w-full">
                            Add to Cart
                        </button>
                    </div>
                `;
                productsContainer.innerHTML += card;
            });
        }

        /**
         * Renders the items currently in the shopping cart.
         */
        function renderCart() {
            cartContainer.innerHTML = ''; // Clear existing cart items
            if (cart.length === 0) {
                cartContainer.innerHTML = '<p class="text-center text-gray-500">Your cart is empty.</p>';
                return;
            }
            cart.forEach(item => {
                const cartItem = `
                    <div class="flex items-center justify-between bg-white p-4 border border-gray-200 rounded-lg">
                        <span class="text-gray-800">${item.name} ($${item.price})</span>
                        <div class="flex items-center space-x-2">
                            <input type="number" min="1" value="${item.quantity}" onchange="updateQuantity(${item.id}, this.value)" class="w-16 text-center border border-gray-300 rounded-md p-1">
                            <button onclick="removeFromCart(${item.id})" class="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-1 px-3 border border-gray-300 rounded-md">
                                Remove
                            </button>
                        </div>
                    </div>
                `;
                cartContainer.innerHTML += cartItem;
            });
        }

        // --- CART LOGIC FUNCTIONS ---

        /**
         * Adds a product to the cart or increments its quantity.
         * @param {number} productId - The ID of the product to add.
         */
        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            const cartItem = cart.find(item => item.id === productId);

            if (cartItem) {
                cartItem.quantity++;
            } else {
                cart.push({ ...product, quantity: 1 });
            }
            renderCart();
        }

        /**
         * Removes an item completely from the cart.
         * @param {number} productId - The ID of the product to remove.
         */
        function removeFromCart(productId) {
            cart = cart.filter(item => item.id !== productId);
            renderCart();
        }

        /**
         * Updates the quantity of an item in the cart.
         * @param {number} productId - The ID of the product to update.
         * @param {number} quantity - The new quantity.
         */
        function updateQuantity(productId, quantity) {
            const cartItem = cart.find(item => item.id === productId);
            const newQuantity = parseInt(quantity, 10);

            if (cartItem && newQuantity > 0) {
                cartItem.quantity = newQuantity;
            } else if (cartItem && newQuantity <= 0) {
                // If quantity is 0 or less, remove the item
                removeFromCart(productId);
            }
            // No need to call renderCart() here as the onchange event handles it
        }


        // --- INITIAL RENDER ---
        document.addEventListener('DOMContentLoaded', () => {
            renderProducts();
            renderCart();
        });

    </script>
</body>
</html>

